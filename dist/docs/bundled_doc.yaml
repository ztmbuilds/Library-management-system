openapi: 3.0.1
info:
  title: Library Management API
  description: API documentation for the library management system
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/signup:
    post:
      summary: User signup
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                email:
                  type: string
                  example: john_doe@example.com
                password:
                  type: string
                  example: examplepassword
                passwordConfirm:
                  type: string
                  example: examplepassword
              required:
                - username
                - email
                - password
                - passwordConfirm
      responses:
        '201':
          description: User created successfully
        '409':
          description: User already exists
        '422':
          description: Validation Error
  /auth/request-email-verification:
    post:
      summary: Request email verification
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
              required:
                - email
      responses:
        '200':
          description: OTP sent to email successfully
        '400':
          description: User already verified
        '404':
          description: User does not exist
        '422':
          description: Validation Error
  /auth/verify-email:
    post:
      summary: Verify email
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 1234567890
                verifyToken:
                  type: string
                  example: 123456
              required:
                - userId
                - verifyToken
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired verification token
        '404':
          description: User not found
        '409':
          description: User already verified
        '422':
          description: Validation Error
  /auth/login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username_or_email:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: examplepassword
              required:
                - username_or_email
                - password
      responses:
        '200':
          description: User login successful
          headers:
            Set-Cookie:
              description: Set refresh token cookie
              schema:
                type: string
                example: refreshToken=123456
        '401':
          description: Invalid credentials
        '422':
          description: Validation Error
  /auth/refresh-access-token:
    get:
      security:
        - bearerAuth: []
      summary: Refresh access token
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
      tags:
        - Auth
      responses:
        '200':
          description: Access Token refreshed successfully
        '401':
          description: Invalid or expired refresh token
        '404':
          description: User not found
        '422':
          description: Validation Error
  /books:
    post:
      summary: Create book
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                genre:
                  type: string
                description:
                  type: string
                totalCopies:
                  type: string
                availableCopies:
                  type: string
              required:
                - title
                - author
                - genre
                - totalCopies
                - availableCopies
      responses:
        '200':
          description: success
    get:
      summary: Get all books
      tags:
        - Books
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        '200':
          description: success
  /books/{id}:
    get:
      summary: Get book by ID
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
    patch:
      summary: Edit book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                genre:
                  type: string
                description:
                  type: string
                totalCopies:
                  type: string
                availableCopies:
                  type: string
      responses:
        '200':
          description: success
    delete:
      summary: Delete book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /books/{id}/borrow:
    post:
      summary: Borrow book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                returnDate:
                  type: string
              required:
                - returnDate
      responses:
        '200':
          description: success
  /books/{id}/borrowing-history:
    get:
      summary: Get borrowing history of a book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        '200':
          description: success
  /books/{id}/reservations:
    post:
      summary: Reserve book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Edit user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users/borrowing-history:
    get:
      summary: Get user borrowing history
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
          example: '-borrowDate,-returnDate'
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
          example: '-renewed,-returned'
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Borrowing'
  /users/reservations:
    get:
      summary: Get user reservations
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
  /users/fines:
    get:
      summary: Get user fines
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fine'
  /reservations/{id}:
    delete:
      summary: Cancel reservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: string
      responses:
        '204':
          description: success
  /reservations/{id}/claim:
    patch:
      summary: Claim reservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                returnDate:
                  type: string
                  format: date
                  example: '2024-10-20'
              required:
                - returnDate
      responses:
        '200':
          description: reservation claimed and book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '404':
          description: No reservation with this Id found'
        '422':
          description: Validation error
  /borrowings/{id}/renew:
    patch:
      summary: Renew book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newReturnDate:
                  type: string
                  format: YYYY-MM-DD
                  example: '2024-09-19'
              required:
                - newReturnDate
      responses:
        '200':
          description: Book renewed successfully
        '404':
          description: No borrowing record found
        '409':
          description: You cannot renew this book because it has existing reservations
        '422':
          description: Validation error
  /borrowings/{id}/return:
    patch:
      summary: Return book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '404':
          description: No borrowing record found
  /borrowings/{id}/report-lost:
    patch:
      summary: Report lost book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Lost the book
              required:
                - description
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Borrowing'
                  - $ref: '#/components/schemas/Fine'
        '404':
          description: No borrowing record found
        '422':
          description: Validation error
  /borrowings/{id}/report-damaged:
    patch:
      summary: Report damaged book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Damaged the book
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Borrowing'
                  - $ref: '#/components/schemas/Fine'
        '404':
          description: No borrowing record found
        '422':
          description: Validation error
  /fines/{id}/initiate-payment:
    post:
      tags:
        - Fines
      summary: Initiate payment for fine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Fine ID
          schema:
            type: string
      responses:
        '200':
          description: success
        '404':
          description: Fine not found
  /fines/{id}:
    get:
      tags:
        - Fines
      summary: Get fine details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Fine ID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fine'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - admin
            - user
        isVerified:
          type: boolean
      required:
        - username
        - email
        - password
    Book:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        description:
          type: string
        totalCopies:
          type: string
        availableCopies:
          type: string
      required:
        - title
        - author
        - genre
        - totalCopies
        - availableCopies
    Borrowing:
      type: object
      properties:
        bookId:
          type: string
        userId:
          type: string
        borrowDate:
          type: string
        returnDate:
          type: string
        actualReturnDate:
          type: string
        returned:
          type: boolean
        renewed:
          type: boolean
      required:
        - bookId
        - userId
        - borrowDate
        - returnDate
    Fine:
      type: object
      properties:
        borrowingId:
          type: string
        userId:
          type: string
        reason:
          type: string
          enum:
            - OVERDUE
            - DAMAGED
            - LOST
            - OTHER
        amount:
          type: number
        status:
          type: string
          enum:
            - PAID
            - PENDING
        paidAt:
          type: string
          format: date
        description:
          type: string
      required:
        - borrowingId
        - userId
        - reason
        - amount
    Payment:
      type: object
      properties:
        fineId:
          type: string
        amount:
          type: number
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
        currency:
          type: string
        transaction_reference:
          type: string
      required:
        - fineId
        - amount
        - status
        - transaction_reference
    Reservation:
      type: object
      properties:
        bookId:
          type: string
        userId:
          type: string
        status:
          type: string
          enum:
            - notified
            - expired
            - claimed
            - pending
        expiresAt:
          type: string
          format: date
      required:
        - bookId
        - userId
    Token:
      type: object
      properties:
        userId:
          type: string
        token:
          type: string
          enum:
            - reset_password
            - verify_email
            - refresh_token
        expiresAt:
          type: string
          format: date-time
      required:
        - userId
        - token
        - expiresAt
        - type
