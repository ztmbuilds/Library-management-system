openapi: 3.0.1
info:
  title: Library Management API
  description: API documentation for the library management system
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/signup:
    post:
      summary: User signup
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
      responses:
        '200':
          description: success
  /auth/request-email-verification:
    post:
      summary: Request email verification
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request-Email-Verification'
      responses:
        '200':
          description: success
  /auth/verify-email:
    post:
      summary: Verify email
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify-Email'
      responses:
        '200':
          description: success
  /auth/login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: success
          headers:
            Set-Cookie:
              description: Set refresh token cookie
              schema:
                type: string
                example: refreshToken=123456
  /auth/refresh-access-token:
    get:
      security:
        - bearerAuth: []
      summary: Refresh access token
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
      tags:
        - Auth
      responses:
        '200':
          description: success
  /books:
    post:
      summary: Create book
      tags:
        - Books
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create-Book'
      responses:
        '200':
          description: success
    get:
      summary: Get all books
      tags:
        - Books
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        '200':
          description: success
  /books/{id}:
    get:
      summary: Get book by ID
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
    patch:
      summary: Edit book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edit-Book'
      responses:
        '200':
          description: success
    delete:
      summary: Delete book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /books/{id}/borrow:
    post:
      summary: Borrow book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                returnDate:
                  type: string
              required:
                - returnDate
      responses:
        '200':
          description: success
  /books/{id}/borrowing-history:
    get:
      summary: Get borrowing history of a book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        '200':
          description: success
  /books/{id}/reservations:
    post:
      summary: Reserve book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /users:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
    patch:
      summary: Edit user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edit-User-Profile'
      responses:
        '200':
          description: success
  /users/borrowing-history:
    get:
      summary: Get user borrowing history
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
  /users/reservations:
    get:
      summary: Get user reservations
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
  /users/fines:
    get:
      summary: Get user fines
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: Sort results by one or more fields. Use `-` for descending order.
          schema:
            type: string
        - name: fields
          in: query
          description: Specify the fields to include or exclude. Use `-` to exclude fields.
          schema:
            type: string
        - name: page
          in: query
          description: The page number of the results to retrieve.
          schema:
            type: integer
            default: 1
          example: 2
        - name: limit
          in: query
          description: Limit the number of results returned per page.
          schema:
            type: integer
            default: 10
          example: 10
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success
  /reservations/{id}:
    delete:
      summary: Cancel reservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /reservations/{id}/claim:
    patch:
      summary: Claim reservation
      tags:
        - Reservations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Reservation ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                returnDate:
                  type: string
                  format: date
              required:
                - returnDate
      responses:
        '200':
          description: success
  /borrowings/{id}/renew:
    patch:
      summary: Renew book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newReturnDate:
                  type: string
                  format: YYYY-MM-DD
                  example: '2024-09-19'
              required:
                - newReturnDate
      responses:
        '200':
          description: success
  /borrowings/{id}/return:
    patch:
      summary: Return book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /borrowings/{id}/report-lost:
    patch:
      summary: Report lost book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Lost the book
      responses:
        '200':
          description: success
  /borrowings/{id}/report-damaged:
    patch:
      summary: Report damaged book
      tags:
        - Borrowings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Borrowing ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Damaged the book
      responses:
        '200':
          description: success
  /fines/{id}/initiate-payment:
    post:
      tags:
        - Fines
      summary: Initiate payment for fine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Fine ID
          schema:
            type: string
      responses:
        '200':
          description: success
  /fines/{id}:
    get:
      tags:
        - Fines
      summary: Get fine details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Fine ID
          schema:
            type: string
      responses:
        '200':
          description: success
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Signup:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        passwordConfirm:
          type: string
      required:
        - username
        - email
        - password
        - passwordConfirm
    Request-Email-Verification:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    Verify-Email:
      type: object
      properties:
        userId:
          type: string
        verifyToken:
          type: string
      required:
        - userId
        - verifyToken
    Login:
      type: object
      properties:
        username_or_email:
          type: string
        password:
          type: string
      required:
        - username_or_email
        - password
    Create-Book:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        description:
          type: string
        totalCopies:
          type: string
        availableCopies:
          type: string
      required:
        - title
        - author
        - genre
        - totalCopies
        - availableCopies
    Edit-Book:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        genre:
          type: string
        description:
          type: string
        totalCopies:
          type: string
        availableCopies:
          type: string
    Edit-User-Profile:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
